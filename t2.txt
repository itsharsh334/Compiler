** This is a small code for verifying syntactic correctness of an empty driver and an empty module **
declare module m1;
declare module m2;
<<<driver program>>>
start
      declare x:integer;
      declare b:array[1..5] of integer;
      declare y:real;
      declare a:array[x..10] of real;
      [x,y]:=use module m2 with parameters a, b[1];
end

<<module mod1>>
takes input [a: integer, b: real];
returns [x: integer, abc: real];
start
      declare c: real;
      c:=10.4;
      x:=a+b-10;
      abc:=b/5+c;
end

<<module m1>>
takes input[a:array[1..10] of real,b:boolean];
returns [x:integer,y:real];
start
      declare m:array[1..10] of real;
      [x,y]:=use module m2 with parameters m,true;
end

<<module m2>>
takes input[a:array[1..10] of real,c:boolean];
returns [x:integer,y:real];
start
      declare x:integer;
      declare n:array[1..5] of integer;
      declare y:real;
      declare m:array[x..10] of real;
      [x,y]:=use module m1 with parameters m,false;
end

** print the following message on the console
      " Input source code is syntactically correct.........."
**

** Also print the parse tree in the format given in function description of printParseTree().[refer interface details]**

** The inorder traversal for an n‐ary tree can be seen as follows

Leftmost child ‐‐> parent node‐‐> remaining siblings (excluding the leftmost)**

** The above tree construction needs to be verified with manually created tree on paper for the above input using the given grammar. You can try using a A3 sized paper and draw the parse tree. work out the inorder traversal and verify your parser output **
